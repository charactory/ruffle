#!/usr/bin/ruby -w
# 
# ruffle - a rubyfied Pacman package analyzer
# Copyright (C) 2008 Colin Gan <laxatives@gmail.com>
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#
require 'rubygems'
require 'fileutils'
require 'tmpdir'
require 'open3' 

#
#this is an ugly way of getting the rule modules easily...
#Dir.glob(File.dirname(__FILE__) + '/ruffle_rules/*.rb').each {|rule| require rule} 
Dir.glob('/home/colin/projects/ruffle/ruffle_rules/*.rb').each {|rule| require rule} 
#require 'ruffle_rules/permissions'

class Ruffle

  def initialize(package_name)
    @sandbox = "#{Dir.tmpdir}/ruffle_#{Process.pid}"
    @package_path = package_name
    @files = []
    @pkginfo = {}
    
    # The array of different return strings
    @ret = [[], [], [],]

  end

  def open_package
    if not File.exist?(@sandbox)
      Dir.mkdir(@sandbox) 
    end
  end

  def view_files
    # files[filenumber][n], where n:
    # 0 --> readwriteexec string
    # 1 --> ownership
    # 2 --> size
    # 3 --> date
    # 4 --> time
    # 5 --> filepath
    # 6 --> symlink arrow
    # 7 --> actual filepath
    `tar -tvf #{@package_path}`.split("\n").each {|x| @files << x.split(" ")}
    #Depends.get_files(@files)
  end

  def check_p_info
    vars = [
            :pkgname, :pkgver, :pkgdesc, :url, :builddate, :packager, :size, :arch, :license, :depend, :optdepend, :md5sum, :sha1sum, :install, :filename, :replaces, :provides
            ] 

    pinfo_path = "#{@sandbox}/.PKGINFO" 

    if File.exist?(pinfo_path)
      puts "Package info exists!"

      begin

        File.open(pinfo_path).each do |x|
          vars.each do |var|
            x.scan(/#{var} = (.*)/) do |val| 
              if @pkginfo.has_key?(var)
                @pkginfo[var] << val.to_s.split(":")[0]
              else
                @pkginfo[var] = val   #IMPORTANT: all pkginfo values are ARRAYS!
              end
            end
          end

        end
        @pkginfo.each_pair {|x,y| puts "#{x} = #{y}"}
      end

    end
  end
  
  def extract_pkginfo
    `tar -tvf #{@package_path}`.split("\n").each {|x| @files << x.split(" ")}
    Dir.mkdir(@sandbox) 

    Open3.popen3("tar -C #{@sandbox} -xf #{@package_path} .PKGINFO") do |stdin, stdout, stderr|
      error = stderr.gets
      if not error.nil?

        if error =~ /tar: (.*): Cannot open: No such file or directory/
          puts "File does not exist"
        elsif error =~ /tar: (.*): Not found in archive/
          puts "Package does not have a .PKGINFO file!"
        else
          puts error
        end
        
      else
        puts "This is where the rules for .PKGINFO is"
      end
    end
  end

  def apply_rules
    [Permissions, Depends].each {|rule| rule.analyze(@files, @package_path,@sandbox, @pkginfo)} 
    #remove for now
    #FileUtils.rm_r(@sandbox, :secure => true)
  end

end

r_namcap = Ruffle.new(ARGV[0])

#r_namcap.open_package
#r_namcap.view_files
r_namcap.extract_pkginfo
r_namcap.check_p_info
r_namcap.apply_rules
