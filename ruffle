#!/usr/bin/ruby -w
#

#require 'zlib'
require 'rubygems'
#require 'facets/minitar'
require 'fileutils'
#include Archive::Tar
#
#this is an ugly way of getting the rule modules easily...
#Dir.glob(File.dirname(__FILE__) + '/ruffle_rules/*.rb').each {|rule| require rule} 
require 'ruffle_rules/permissions'

class Ruffle
  def initialize
    @sandbox = '/home/colin/sandbox_namcap/'
    #@package_path = '/home/colin/c.img'
    @package_path = '/home/colin/builds/PACKAGE_CACHE/libxft-2.1.13-2-i686.pkg.tar.gz'
    #@package_path = '/home/colin/builds/PACKAGE_CACHE/xulrunner-1.9.0.4-3-i686.pkg.tar.gz'
    #@package_path = '/home/colin/c.iasdkaj '
    @files = []
  end

  def open_package
    if not File.exist?(@sandbox)
      begin
      Dir.mkdir(@sandbox) 
      tgz = Zlib::GzipReader.new(File.open(@package_path, 'rb'))
      Minitar.unpack(tgz, @sandbox)

      rescue Errno::ENOENT
        puts "File does not exist!"
      rescue Zlib::GzipFile::Error
        puts "This is not a package file!"  
      end
    end
  end

  def view_files
    # files[number][n], where n:
    # 0 --> readwriteexec string
    # 1 --> ownership
    # 2 --> size
    # 3 --> date
    # 4 --> time
    # 5 --> filepath
    # 6 --> symlink arrow
    # 7 --> actual filepath
    `tar -tvf #{@package_path}`.split("\n").each {|x| @files << x.split(" ")}
    Permissions.check(@files)
  end

  def check_p_info
    package_info = "#{@sandbox}/.PKGINFO" 
    pkginfo_vars = [:pkgname, :pkgver, :pkgdesc, :url, :builddate, :packager, :size, :arch, :license, :depend, :optdepend] 
    pkginfo_hash = {}
    
    if File.exist?(package_info)
      puts "Package info exists!"

      begin
        File.open(package_info).each do |x|
          #x.scan(/(.*)? = (.*)/) {|x, y| puts x + "~~~" + y}
          pkginfo_vars.each do |var|
            x.scan(/#{var} = (.*)/) {|val| pkginfo_hash[var] = val} 
          end
        end
        pkginfo_hash.each_pair {|x,y| puts "#{x} = #{y}"}
      end

    end
    #remove for now
    #FileUtils.rm_r(@sandbox, :secure => true)
  end

end

r_namcap = Ruffle.new

#r_namcap.open_package
#r_namcap.check_p_info
r_namcap.view_files
